A=read.xlsx('dataCCA.xlsx')
mm=(no-10*(cc-2))/
A=read.xlsx('dataCCA.xlsx',1)
mm=(no-10*(cc-2))/
RAW=read.xlsx('dataCCA.xlsx',1)
mm=(no-10*(cc-2))/
RAW=read.xlsx('dataCCA.xlsx',1)
mm=(no-10*(cc-2))
RAW=read.xlsx('dataCCA.xlsx',1)
View(RAW)
RAW[1,1]=0;
names(RAW)
names(RAW)=c('prec','conv','olr','slp','theta')
RAW=read.xlsx('dataCCA.xlsx',1)
RAW[1,1]=0;
names(RAW)=c('prec','conv','olr','slp','theta')
RAW[1,1]=0
names(RAW)=c('prec','conv','olr','slp','theta')
names(RAW)=c('prec','conv','olr','slp','theta')
Y=data.frame('ppt'=RAW$prec,'conv_ppt'=RAW$conv)
View(Y)
X=data.frame('SLP'=RAW$slp,'Theta'=RAW$theta,'OLR'=RAW$olr)
names(RAW)=c('prec','conv','olr','slp','theta')
Y=data.frame('ppt'=RAW$prec,'conv_ppt'=RAW$conv)
X=data.frame('SLP'=RAW$slp,'Theta'=RAW$theta,'OLR'=RAW$olr)
View(RAW)
View(X)
View(Y)
install.packages("CCA")
library(CCA)
cca(Y,X)
?cc
cca(X,Y)
cc(X,Y)
class(X)
class(X[1:2])
class(X[, 1:2])
as.numeric(x)
as.numeric(X)
Y=c(RAW$prec,RAW$conv)
as.numeric(Y)
class(Y)
Y=RAW[ ,c(1,2)]
View(Y)
cc(X,Y)
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[ ,c(1,2)]
X=RAW[ ,c(4,5,3)]
cc(X,Y)
X=as.numeric(RAW[ ,c(4,5,3)])
X=as.numeric(RAW[ ,c(4,5,3)])
X=RAW[ ,c(4,5,3)]
View(X)
RAW=read.xlsx('dataCCA.xlsx',1)
RAW[1,1]=0
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[ ,c(1,2)]
X=RAW[ ,c(4,5,3)]
cc(X,Y)
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
cc(X,Y)
X=as.matrix(RAW[1:480,c(4,5,3)])
cc(X,Y)
Y=as.matrix(RAW[1:480,c(1,2)])
X=as.matrix(RAW[1:480,c(4,5,3)])
cc(X,Y)
Y=as.matrix(RAW[1:480,c(1,2)])
X=as.matrix(RAW[1:480,c(4,5,3)])
cc(X,Y)
View(X)
class(X)
Y=as.numeric(RAW[1:480,c(1,2)])
class(X[,1])
cc(X[,1], X[ ,2])
cancor(X,Y
)
cancor(X,Y)
as.numeric
Y=as.numeric(RAW[1:480,c(1,2)])
Y=RAW[1:480,c(1,2)]
X=as.matrix(RAW[1:480,c(4,5,3)])
cancor(X,Y)
X=RAW[1:480,c(4,5,3)]
RAW[1,1]=0
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
cancor(X,Y)
class(X[,1])
class(X[,2])
class(X[,3])
class(Y[,1])
class(Y[,2])
RAW[1,1]=0.00
RAW=read.xlsx('dataCCA.xlsx',1)
RAW[1,1]=0.00
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
class(Y[,2])
class(Y[,1])
cancor(X,X)
help("read.xlsx")
RAW=read.xlsx('dataCCA.xlsx',1,colClasses = c('numeric','numeric','numeric','numeric','numeric'))
RAW[1,1]=0.00
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
cancor(X,X)
class(Y[,1])
cancor(X,Y)
cc(X,Y)
CChandlecc(X,Y)
CCH=cc(X,Y)
summary(CCH)
CCH$scores
CCH$scores$xscores
CCH$cor
CCH$xcoef
CCH$ycoef
CCH$scores$corr.X.xscores
CCH$scores$xscores
CCH$scores$xscores
xxx=CCH$scores$xscores
View(xxx)
xxx=CCH$scores$yscores
xxx=CCH$scores$xscores
yyy=CCH$scores$yscores
cov(xxx[,1],yyy[,1])
CCH$scores$corr.X.xscores
CCH$names
CCH$xcoef
CCH$cor
cor(xxx[,1],yyy[,1])
plot(CCH$scores$xscores[,1],CCH$scores$yscores[,1])
rm(list=ls())
setwd("/home/de/Dropbox/MTech/Hydroinformatics/Assignment 4/")
A=read.table('dataSST.txt',colClasses  = c('numeric','numeric','numeric','numeric'))
A[ ,1]=A[ ,1] - 108.5
A[ ,2]=A[ ,2] + 31.5
Temp=A[ ,4]
dim(Temp)=c(10800,29)
TEMPERATURE=as.data.frame(t(Temp))
PCA_Result=prcomp(TEMPERATURE,tol=0.0)
Lam=(PCA_Result$sdev)^2/sum((PCA_Result$sdev)^2)*100
u
u
rm(list=ls())
setwd("/home/de/Dropbox/MTech/Hydroinformatics/Assignment 4/")
A=read.table('dataSST.txt',colClasses  = c('numeric','numeric','numeric','numeric'))
A[ ,1]=A[ ,1] - 108.5
A[ ,2]=A[ ,2] + 31.5
Temp=A[ ,4]
dim(Temp)=c(10800,29)
TEMPERATURE=as.data.frame(t(Temp))
PCA_Result=prcomp(TEMPERATURE,tol=0.0)
Lam=(PCA_Result$sdev)^2/sum((PCA_Result$sdev)^2)*100
CumLam=(cumsum(Lam))
hist(CumLam,col = 'green',breaks = 29,xlim=c(0,100))
CumLam[1]
pve=CumLam[1]
ev=PCA_Result$rotation
ev1=x[ ,1]
dim(ev1)=c(180,60)
library(fields)
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
pve=CumLam[1]
ev=PCA_Result$rotation
ev1=x[ ,1]
dim(ev1)=c(180,60)
library(fields)
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
PCA_Result=prcomp(TEMPERATURE,tol=0.0)
Lam=(PCA_Result$sdev)^2/sum((PCA_Result$sdev)^2)*100
CumLam=(cumsum(Lam))
pve=CumLam[1]
ev=PCA_Result$rotation
ev1=x[ ,1]
dim(ev1)=c(180,60)
library(fields)
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
ev=PCA_Result$rotation
ev1=ev[ ,1]
dim(ev1)=c(180,60)
library(fields)
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
ev=PCA_Result$rotation
ev1=ev[ ,1]
dim(ev1)=c(180,60)
png(filename="PC1.png")
library(fields)
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
dev.off()
dim(ev1)=c(180,60)
png(filename="PC1.png")
library(fields)
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
dev.off()
library(fields)
dev.new()
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
dev.off()
z1=PCA_Result$x[ ,1]
plot(z1)
dev.off()
z1=PCA_Result$x[ ,1]
plot(z1,xlab='time(Years)',ylab='PC1 values')
barplot(CumLam,names.arg=seq(1:29),col='deepskyblue')
lines(c(10,50),c(100,100),col='red',lw=2)
lines(c(10,50),c(90,90),col='green',lw=2)
legend('topleft',c('100%','90%'),lty=c(1,1),col=c('red','green'))
barplot(CumLam,names.arg=seq(1:29),col='deepskyblue')
lines(c(10,50),c(100,100),col='red',lw=2)
lines(c(10,50),c(90,90),col='green',lw=2)
legend('topleft',c('100%','90%'),lty=c(1,1),col=c('red','green'))
which(CumLam>=90)
barplot(CumLam,names.arg=seq(1:29),col='deepskyblue',xlab='No of Principlal Pomponents',ylab='% variance explained')
lines(c(10,50),c(100,100),col='red',lw=2)
lines(c(10,50),c(90,90),col='green',lw=2)
legend('topleft',c('100%','90%'),lty=c(1,1),col=c('red','green'))
dev.new()
barplot(CumLam,names.arg=seq(1:29),col='deepskyblue',xlab='No of Principlal Pomponents',ylab='% variance explained')
lines(c(10,50),c(100,100),col='red',lw=2)
lines(c(10,50),c(90,90),col='green',lw=2)
legend('topleft',c('100%','90%'),lty=c(1,1),col=c('red','green'))
which(CumLam>=90)
require(e1071)
rm(FPI)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
z1=PCA_Result$x[ ,1]
z1=PCA_Result$x[ ,2]
plot(z1,z2,xlab='First Principal Component',ylab='Second Principal Component')
,
z1=PCA_Result$x[ ,1]
z2=PCA_Result$x[ ,2]
plot(z1,z2,xlab='First Principal Component',ylab='Second Principal Component')
RAW=read.xlsx('dataCCA.xlsx',1,colClasses = c('numeric','numeric','numeric','numeric','numeric'))
RAW[1,1]=0.00
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
CCH=cc(X,Y)
summary(CCH)
CCH$cor
plot(CCH$scores$xscores[,1],CCH$scores$yscores[,1])
plot(CCH$scores$xscores[,1],CCH$scores$yscores[,1],'U1',ylab='V1')
plot(CCH$scores$xscores[,1],CCH$scores$yscores[,1],xlab='U1',ylab='V1')
CCH$scores$xscores
CCH$scores$corr.X.xscores
CCH$scores$corr.X.yscores
CCH$scores$corr.Y.xscores
CCH$xcoef
require(e1071)
rm(list=ls())
setwd("/home/de/Dropbox/MTech/Hydroinformatics/Assignment 4/")
A=read.table('dataSST.txt',colClasses  = c('numeric','numeric','numeric','numeric'))
A[ ,1]=A[ ,1] - 108.5
A[ ,2]=A[ ,2] + 31.5
Temp=A[ ,4]
dim(Temp)=c(10800,29)
TEMPERATURE=as.data.frame(t(Temp))
PCA_Result=prcomp(TEMPERATURE,tol=0.0)
Lam=(PCA_Result$sdev)^2/sum((PCA_Result$sdev)^2)*100
CumLam=(cumsum(Lam))
pve=CumLam[1]
ev=PCA_Result$rotation
ev1=ev[ ,1]
dim(ev1)=c(180,60)
library(fields)
dev.new()
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
dev.off()
z1=PCA_Result$x[ ,1]
plot(z1,xlab='time(Years)',ylab='PC1 values')
dev.new()
barplot(CumLam,names.arg=seq(1:29),col='deepskyblue',xlab='No of Principlal Pomponents',ylab='% variance explained')
lines(c(10,50),c(100,100),col='red',lw=2)
lines(c(10,50),c(90,90),col='green',lw=2)
legend('topleft',c('100%','90%'),lty=c(1,1),col=c('red','green'))
dev.off()
z1=PCA_Result$x[ ,1]
z2=PCA_Result$x[ ,2]
plot(z1,z2,xlab='First Principal Component',ylab='Second Principal Component')
which(CumLam>=90)
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
as.vector(FPI )
Ff=FPI-0.25
Ff=abs(FPI-0.25)
Ff[which.min(Ff)]
no=90
cc=as.integer((no-1)/10)+2;
mm=(no-10*(cc-2))*0.1+1.1
mm=(no-10*(cc-2))*0.1+1
no=90
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
no=1
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
as.vector(FPI )
Ff=abs(FPI-0.25)
no=which.min(Ff)
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
Ff=abs(FPI-0.25)
no=which.min(Ff)
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
Ff=abs(FPI-0.25)
no=which.min(Ff)
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
Ff=abs(FPI-0.25)
no=which.min(Ff)
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE,
character.only = FALSE)
{
if (!character.only)
package <- as.character(substitute(package))
loaded <- paste0("package:", package) %in% search()
if (!loaded) {
if (!quietly)
packageStartupMessage(gettextf("Loading required package: %s",
package), domain = NA)
value <- tryCatch(library(package, lib.loc = lib.loc,
character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts,
quietly = quietly), error = function(e) e)
if (inherits(value, "error")) {
if (!quietly) {
msg <- conditionMessage(value)
cat("Failed with error:  ", sQuote(msg), "\n",
file = stderr(), sep = "")
.Internal(printDeferredWarnings())
}
return(invisible(FALSE))
}
if (!value)
return(invisible(FALSE))
}
else value <- TRUE
invisible(value)
}
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
Ff=abs(FPI-0.25)
no=which.min(Ff)
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
FPI
FPIf=1-(cc*F-1)/(cc-1)
F=sum((handle$membership)^2)/29;
FPIf=1-(cc*F-1)/(cc-1)
FPIf
MembMat=handle$membership
View(MembMat)
rm(list=ls())
setwd("/home/de/Dropbox/MTech/Hydroinformatics/Assignment 4/")
A=read.table('dataSST.txt',colClasses  = c('numeric','numeric','numeric','numeric'))
A[ ,1]=A[ ,1] - 108.5
A[ ,2]=A[ ,2] + 31.5
Temp=A[ ,4]
dim(Temp)=c(10800,29)
TEMPERATURE=as.data.frame(t(Temp))
PCA_Result=prcomp(TEMPERATURE,tol=0.0)
Lam=(PCA_Result$sdev)^2/sum((PCA_Result$sdev)^2)*100
CumLam=(cumsum(Lam))
pve=CumLam[1]
ev=PCA_Result$rotation
ev1=ev[ ,1]
dim(ev1)=c(180,60)
library(fields)
dev.new()
image.plot(seq(109.5,288.5),seq(-30.5,28.5),ev1,xlab='Longitude',ylab='Latitude',xlim=c(109.5, 288.5), ylim=c(-30.5, 28.5))
dev.off()
z1=PCA_Result$x[ ,1]
plot(z1,xlab='time(Years)',ylab='PC1 values')
dev.new()
barplot(CumLam,names.arg=seq(1:29),col='deepskyblue',xlab='No of Principlal Pomponents',ylab='% variance explained')
lines(c(10,50),c(100,100),col='red',lw=2)
lines(c(10,50),c(90,90),col='green',lw=2)
legend('topleft',c('100%','90%'),lty=c(1,1),col=c('red','green'))
dev.off()
z1=PCA_Result$x[ ,1]
z2=PCA_Result$x[ ,2]
plot(z1,z2,xlab='First Principal Component',ylab='Second Principal Component')
which(CumLam>=90)
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
plot(z1,z2,xlab='First Principal Component',ylab='Second Principal Component')
which(CumLam>=90)
require(e1071)
FPI=0
dataCM=PCA_Result$x[ ,1:5]
coun=1
for(cc in 2:10)
{
for(mm in seq(1.1,2,0.1))
{
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPI[coun]=1-(cc*F-1)/(cc-1)
coun=coun+1
}
}
Ff=abs(FPI-0.25)
no=which.min(Ff)
cc=as.integer((no-1)/10)+2
mm=(no-10*(cc-2))*0.1+1
handle=cmeans (dataCM, cc, iter.max=100, dist="euclidean",method="cmeans", m=mm)
F=sum((handle$membership)^2)/29;
FPIf=1-(cc*F-1)/(cc-1)
MembMat=handle$membership
RAW=read.xlsx('dataCCA.xlsx',1,colClasses = c('numeric','numeric','numeric','numeric','numeric'))
RAW[1,1]=0.00
names(RAW)=c('prec','conv','olr','slp','theta')
Y=RAW[1:480,c(1,2)]
X=RAW[1:480,c(4,5,3)]
CCH=cc(X,Y)
summary(CCH)
CCH$cor
plot(CCH$scores$xscores[,1],CCH$scores$yscores[,1],xlab='U1',ylab='V1')
